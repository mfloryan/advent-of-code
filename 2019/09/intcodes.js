const assert = require('assert');
console.log('Day 09');

const sampleCode = [1, 9, 10, 3, 2, 3, 11, 0, 99, 30, 40, 50];
const day2InputCode = [1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 10, 1, 19, 1, 19, 9, 23, 1, 23, 6, 27, 1, 9, 27, 31, 1, 31, 10, 35, 2, 13, 35, 39, 1, 39, 10, 43, 1, 43, 9, 47, 1, 47, 13, 51, 1, 51, 13, 55, 2, 55, 6, 59, 1, 59, 5, 63, 2, 10, 63, 67, 1, 67, 9, 71, 1, 71, 13, 75, 1, 6, 75, 79, 1, 10, 79, 83, 2, 9, 83, 87, 1, 87, 5, 91, 2, 91, 9, 95, 1, 6, 95, 99, 1, 99, 5, 103, 2, 103, 10, 107, 1, 107, 6, 111, 2, 9, 111, 115, 2, 9, 115, 119, 2, 13, 119, 123, 1, 123, 9, 127, 1, 5, 127, 131, 1, 131, 2, 135, 1, 135, 6, 0, 99, 2, 0, 14, 0];
const day5InputCode = [3,225,1,225,6,6,1100,1,238,225,104,0,1002,36,25,224,1001,224,-2100,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1102,31,84,225,1102,29,77,225,1,176,188,224,101,-42,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,2,196,183,224,1001,224,-990,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,102,14,40,224,101,-1078,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1001,180,64,224,101,-128,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,24,17,224,1001,224,-408,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,9,66,224,1001,224,-75,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1102,18,33,225,1101,57,64,225,1102,45,11,225,1101,45,9,225,1101,11,34,225,1102,59,22,225,101,89,191,224,1001,224,-100,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,677,224,1002,223,2,223,1006,224,329,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,344,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,359,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,374,101,1,223,223,1008,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,404,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,434,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,449,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,464,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,494,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,524,101,1,223,223,1007,677,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,554,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,569,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,584,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,614,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,629,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,644,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,7,677,677,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226];

const day9InputCode = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,
                       53,1101,3,0,1000,109,988,209,12,9,
                       1000,209,6,209,3,203,0,1008,1000,1,
                       63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,0,1,1020,1102,29,1,1001,1101,0,28,1016,1102,1,31,1011,1102,1,396,1029,1101,26,0,1007,1101,0,641,1026,1101,466,0,1023,1101,30,0,1008,1102,1,22,1003,1101,0,35,1019,1101,0,36,1018,1102,1,37,1012,1102,1,405,1028,1102,638,1,1027,1102,33,1,1000,1102,1,27,1002,1101,21,0,1017,1101,0,20,1015,1101,0,34,1005,1101,0,23,1010,1102,25,1,1013,1101,39,0,1004,1101,32,0,1009,1101,0,38,1006,1101,0,473,1022,1102,1,1,1021,1101,0,607,1024,1102,1,602,1025,1101,24,0,1014,109,22,21108,40,40,-9,1005,1013,199,4,187,1105,1,203,1001,64,1,64,1002,64,2,64,109,-17,2102,1,4,63,1008,63,32,63,1005,63,229,4,209,1001,64,1,64,1105,1,229,1002,64,2,64,109,9,21108,41,44,1,1005,1015,245,1105,1,251,4,235,1001,64,1,64,1002,64,2,64,109,4,1206,3,263,1105,1,269,4,257,1001,64,1,64,1002,64,2,64,109,-8,21102,42,1,5,1008,1015,42,63,1005,63,291,4,275,1105,1,295,1001,64,1,64,1002,64,2,64,109,-13,1208,6,22,63,1005,63,313,4,301,1105,1,317,1001,64,1,64,1002,64,2,64,109,24,21107,43,44,-4,1005,1017,339,4,323,1001,64,1,64,1105,1,339,1002,64,2,64,109,-5,2107,29,-8,63,1005,63,361,4,345,1001,64,1,64,1105,1,361,1002,64,2,64,109,-4,2101,0,-3,63,1008,63,32,63,1005,63,387,4,367,1001,64,1,64,1106,0,387,1002,64,2,64,109,13,2106,0,3,4,393,1001,64,1,64,1105,1,405,1002,64,2,64,109,-27,2102,1,2,63,1008,63,35,63,1005,63,425,1105,1,431,4,411,1001,64,1,64,1002,64,2,64,109,5,1202,2,1,63,1008,63,31,63,1005,63,455,1001,64,1,64,1106,0,457,4,437,1002,64,2,64,109,19,2105,1,1,1001,64,1,64,1105,1,475,4,463,1002,64,2,64,109,-6,21102,44,1,1,1008,1017,45,63,1005,63,499,1001,64,1,64,1105,1,501,4,481,1002,64,2,64,109,6,1205,-2,513,1106,0,519,4,507,1001,64,1,64,1002,64,2,64,109,-17,1207,-1,40,63,1005,63,537,4,525,1106,0,541,1001,64,1,64,1002,64,2,64,109,-8,1201,9,0,63,1008,63,38,63,1005,63,567,4,547,1001,64,1,64,1106,0,567,1002,64,2,64,109,-3,2101,0,6,63,1008,63,32,63,1005,63,591,1001,64,1,64,1105,1,593,4,573,1002,64,2,64,109,22,2105,1,8,4,599,1106,0,611,1001,64,1,64,1002,64,2,64,109,8,1206,-4,625,4,617,1105,1,629,1001,64,1,64,1002,64,2,64,109,3,2106,0,0,1106,0,647,4,635,1001,64,1,64,1002,64,2,64,109,-29,2107,27,9,63,1005,63,667,1001,64,1,64,1106,0,669,4,653,1002,64,2,64,109,7,1207,-4,28,63,1005,63,689,1001,64,1,64,1105,1,691,4,675,1002,64,2,64,109,-7,2108,30,3,63,1005,63,711,1001,64,1,64,1105,1,713,4,697,1002,64,2,64,109,17,21101,45,0,-5,1008,1010,45,63,1005,63,735,4,719,1106,0,739,1001,64,1,64,1002,64,2,64,109,-9,1202,-2,1,63,1008,63,39,63,1005,63,765,4,745,1001,64,1,64,1106,0,765,1002,64,2,64,109,10,21101,46,0,-5,1008,1011,48,63,1005,63,785,1106,0,791,4,771,1001,64,1,64,1002,64,2,64,109,-10,1208,0,36,63,1005,63,811,1001,64,1,64,1105,1,813,4,797,1002,64,2,64,109,7,1205,8,827,4,819,1105,1,831,1001,64,1,64,1002,64,2,64,109,-15,2108,27,4,63,1005,63,853,4,837,1001,64,1,64,1106,0,853,1002,64,2,64,109,14,1201,-3,0,63,1008,63,30,63,1005,63,877,1001,64,1,64,1106,0,879,4,859,1002,64,2,64,109,11,21107,47,46,-5,1005,1018,899,1001,64,1,64,1105,1,901,4,885,4,64,99,21101,0,27,1,21101,0,915,0,1105,1,922,21201,1,31783,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1106,0,922,21201,1,0,-1,21201,-2,-3,1,21101,0,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,22102,1,-2,-2,109,-3,2105,1,0];

class Cpu {

  getParameterMode(opcode, parameterIndex) {
    // console.log(`${opcode} -> index ${parameterIndex}`);
    // console.log(`${Math.round((opcode / Math.pow(10, parameterIndex+1)) % 10)}`);
    return Math.round((opcode / Math.pow(10, parameterIndex+1)) % 10);
  }

  getParameterValue(index) {
    let parameterMode = this.getParameterMode(this.memory[this.pc], index);
    if (parameterMode == 0) {
      //positional
      return this.memory[this.memory[this.pc+index]];
    } else if (parameterMode == 1) {
      //immediate
      return this.memory[this.pc + index];
    } else if (parameterMode == 2) {
      //relative
      return this.memory[this.memory[this.pc + index] + this.relativeBase];
    } else {
      console.log("Invalid parameter mode: " + parameterMode);
    }
  }

  opcodes = {
    1: function add() {
      let writeOffset = this.getParameterMode(this.memory[this.pc], 3)==2? this.relativeBase : 0;
      this.memory[this.memory[this.pc+3] + writeOffset] = this.getParameterValue(1) + this.getParameterValue(2);
      this.pc += 4;
    },
    2: function multiply() {
      let writeOffset = this.getParameterMode(this.memory[this.pc], 3)==2? this.relativeBase : 0;
      this.memory[this.memory[this.pc+3] + writeOffset] = this.getParameterValue(1) * this.getParameterValue(2);
      this.pc += 4;
    },
    3: function input() {
      let writeOffset = this.getParameterMode(this.memory[this.pc], 1)==2? this.relativeBase : 0;
      this.memory[this.memory[this.pc+1] + writeOffset] = this.input;
      this.pc += 2;
    },
    4: function output() {
      this.output = this.getParameterValue(1);
      console.log(this.output);
      this.pc += 2;
    },
    5: function jump_if_true() {
      if (this.getParameterValue(1) !== 0) {
        this.pc = this.getParameterValue(2);
      } else {
        this.pc += 3;
      }
    },
    6: function jump_if_false() {
      if (this.getParameterValue(1) === 0) {
        this.pc = this.getParameterValue(2);
      } else {
        this.pc += 3;
      }
    },
    7: function less_than() {
      let writeOffset = this.getParameterMode(this.memory[this.pc], 3)==2? this.relativeBase : 0;
      if (this.getParameterValue(1) < this.getParameterValue(2)) {
        this.memory[this.memory[this.pc+3] + writeOffset] = 1;
      } else {
        this.memory[this.memory[this.pc+3] + writeOffset] = 0;
      }
      this.pc += 4;
    },
    8: function equals() {
      let writeOffset = this.getParameterMode(this.memory[this.pc], 3)==2? this.relativeBase : 0;
      if (this.getParameterValue(1) === this.getParameterValue(2)) {
        this.memory[this.memory[this.pc+3] + writeOffset] = 1;
      } else {
        this.memory[this.memory[this.pc+3] + writeOffset] = 0;
      }
      this.pc += 4;
    },
    9: function adjust_relative_base() {
      this.relativeBase += this.getParameterValue(1);
      this.pc += 2;
    }
  };

  constructor (memory) {
    this.memory = memory.slice().concat(new Array(10000).fill(0));
    this.pc = 0;
    this.input = 0;
    this.output = 0;
    this.relativeBase = 0;
  }

   run () {
     console.log();
    this.pc = 0;
    while (this.memory[this.pc] !== 99) {
      // console.log(`PC: ${this.pc}`);
      // console.log(this.memory.map((m,i) => m.toString().padStart(5,this.pc == i?'.':' ')).join("|"));

      let opcodeValue = this.memory[this.pc] % 100;
      const op = this.opcodes[opcodeValue];

      if (op) {
        // console.log(op);
        op.apply(this);
      } else {
        console.log("Unknown opcode: " + op);
        break;
      }
    }
  }

  getMemory(address) {
    return this.memory[address];
  }

  setMemory(address, value) {
    this.memory[address] = value;
  }

  setInput(value) {
    this.input = value;
  }

  getOutput() {
    return this.output;
  }

};

// let cpu1 = new Cpu(sampleCode);
// cpu1.run();
// assert.strictEqual(cpu1.getMemory(0), 3500);

// let cpu2 = new Cpu(day2InputCode);
// cpu2.setMemory(1, 12);
// cpu2.setMemory(2, 2);
// cpu2.run();
// assert.strictEqual(cpu2.getMemory(0), 4138658);


// let cpu3 = new Cpu([3,0,4,0,99]);
// cpu3.setInput(30);
// cpu3.run();
// assert.strictEqual(cpu3.getOutput(), 30);

// let cpu4 = new Cpu([1002,4,3,4,33]);
// cpu4.run();

// let cpu5 = new Cpu(day5InputCode);
// cpu5.setInput(1);
// cpu5.run();
// console.log(cpu5.getOutput());
// assert.strictEqual(cpu5.getOutput(), 3122865);

// let cpu6 = new Cpu([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]);
// cpu6.setInput(0);
// cpu6.run();
// assert.strictEqual(cpu6.getOutput(), 0)

// cpu6.setInput(2);
// cpu6.run();
// assert.strictEqual(cpu6.getOutput(), 1);

// let cpu7 = new Cpu([3,3,1105,-1,9,1101,0,0,12,4,12,99,1]);
// cpu7.setInput(0);
// cpu7.run();
// assert.strictEqual(cpu7.getOutput(), 0)

// cpu7.setInput(2);
// cpu7.run();
// // assert.strictEqual(cpu7.getOutput(), 1);

// let cpu8 = new Cpu([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
//   1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
//   999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]);

// cpu8.setInput(6);
// cpu8.run();
// assert.strictEqual(cpu8.getOutput(),999);

// cpu8.setInput(8);
// cpu8.run();
// assert.strictEqual(cpu8.getOutput(),1000);

// cpu8.setInput(10);
// cpu8.run();
// assert.strictEqual(cpu8.getOutput(),1001);

// let cpuPartTwp = new Cpu(day5InputCode);
// cpuPartTwp.setInput(5);
// cpuPartTwp.run();
// console.log(cpuPartTwp.getOutput());



let cpu9 = new Cpu([109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]);
cpu9.run();
console.log(cpu9.output);

let cpuA = new Cpu([1102,34915192,34915192,7,4,7,99,0]);
cpuA.run();
console.log(cpuA.getOutput());

let cpuB = new Cpu([104,1125899906842624,99]);
cpuB.run();
console.log(cpuB.getOutput());


let cpuDay9 = new Cpu(day9InputCode);
cpuDay9.setInput(1);
cpuDay9.run();
console.log(cpuDay9.getOutput());


let cpuDay92 = new Cpu(day9InputCode);
cpuDay92.setInput(2);
cpuDay92.run();
console.log(cpuDay92.getOutput());